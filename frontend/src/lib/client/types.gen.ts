// This file is auto-generated by @hey-api/openapi-ts

export type EntryCreateRequest = {
  name: string;
  description?: string | null;
  is_public?: boolean;
};

export type EntryDetailsResponse = {
  response_model?: string;
  id: string;
  created_at: string;
  updated_at: string;
  name: string;
  description?: string | null;
  thumbnail_url?: string | null;
  is_public: boolean;
};

export type EntryUpdateRequest = {
  name?: string | null;
  description?: string | null;
  is_public?: boolean | null;
};

export type HttpValidationError = {
  detail?: Array<ValidationError>;
};

export type PaginatedResponseEntryDetailsResponse = {
  response_model?: string;
  page: number;
  per_page: number;
  total_pages: number;
  total_items: number;
  items: Array<EntryDetailsResponse>;
};

export type ShareLinkResponse = {
  response_model?: string;
  id: string;
  created_at: string;
  updated_at: string;
  is_editable: boolean;
  is_active: boolean;
};

export type ShareLinkUpdateRequest = {
  is_editable?: boolean | null;
  is_active?: boolean | null;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type ViewCreateRequest = {
  name: string;
  description?: string | null;
  /**
   * Mol* state file (.molj file)
   */
  snapshot_json: Blob | File;
  /**
   * Thumbnail image for view
   */
  thumbnail_image?: (Blob | File) | null;
};

export type ViewResponse = {
  response_model?: string;
  id: string;
  created_at: string;
  updated_at: string;
  name: string;
  description?: string | null;
  thumbnail_url: string;
  snapshot_url: string;
};

export type ViewUpdateRequest = {
  name: string;
  description?: string | null;
};

export type EntriesListEntriesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Keywords to search by in entry titles and descriptions.
     */
    search_term?: string | null;
    page?: number;
    per_page?: number;
  };
  url: "/api/v1/entries";
};

export type EntriesListEntriesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type EntriesListEntriesError =
  EntriesListEntriesErrors[keyof EntriesListEntriesErrors];

export type EntriesListEntriesResponses = {
  /**
   * Successful Response
   */
  200: PaginatedResponseEntryDetailsResponse;
};

export type EntriesListEntriesResponse =
  EntriesListEntriesResponses[keyof EntriesListEntriesResponses];

export type EntriesCreateEntryData = {
  body: EntryCreateRequest;
  path?: never;
  query?: never;
  url: "/api/v1/entries";
};

export type EntriesCreateEntryErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type EntriesCreateEntryError =
  EntriesCreateEntryErrors[keyof EntriesCreateEntryErrors];

export type EntriesCreateEntryResponses = {
  /**
   * Successful Response
   */
  201: EntryDetailsResponse;
};

export type EntriesCreateEntryResponse =
  EntriesCreateEntryResponses[keyof EntriesCreateEntryResponses];

export type EntriesListEntriesForUserData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Keywords to search by in entry titles and descriptions.
     */
    search_term?: string | null;
    page?: number;
    per_page?: number;
  };
  url: "/api/v1/entries/user";
};

export type EntriesListEntriesForUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type EntriesListEntriesForUserError =
  EntriesListEntriesForUserErrors[keyof EntriesListEntriesForUserErrors];

export type EntriesListEntriesForUserResponses = {
  /**
   * Successful Response
   */
  200: PaginatedResponseEntryDetailsResponse;
};

export type EntriesListEntriesForUserResponse =
  EntriesListEntriesForUserResponses[keyof EntriesListEntriesForUserResponses];

export type EntriesDeleteEntryData = {
  body?: never;
  path: {
    entry_id: string;
  };
  query?: never;
  url: "/api/v1/entries/{entry_id}";
};

export type EntriesDeleteEntryErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type EntriesDeleteEntryError =
  EntriesDeleteEntryErrors[keyof EntriesDeleteEntryErrors];

export type EntriesDeleteEntryResponses = {
  /**
   * Successful Response
   */
  200: string;
};

export type EntriesDeleteEntryResponse =
  EntriesDeleteEntryResponses[keyof EntriesDeleteEntryResponses];

export type EntriesGetEntryData = {
  body?: never;
  path: {
    entry_id: string;
  };
  query?: never;
  url: "/api/v1/entries/{entry_id}";
};

export type EntriesGetEntryErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type EntriesGetEntryError =
  EntriesGetEntryErrors[keyof EntriesGetEntryErrors];

export type EntriesGetEntryResponses = {
  /**
   * Successful Response
   */
  200: EntryDetailsResponse;
};

export type EntriesGetEntryResponse =
  EntriesGetEntryResponses[keyof EntriesGetEntryResponses];

export type EntriesUpdateEntryData = {
  body: EntryUpdateRequest;
  path: {
    entry_id: string;
  };
  query?: never;
  url: "/api/v1/entries/{entry_id}";
};

export type EntriesUpdateEntryErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type EntriesUpdateEntryError =
  EntriesUpdateEntryErrors[keyof EntriesUpdateEntryErrors];

export type EntriesUpdateEntryResponses = {
  /**
   * Successful Response
   */
  200: EntryDetailsResponse;
};

export type EntriesUpdateEntryResponse =
  EntriesUpdateEntryResponses[keyof EntriesUpdateEntryResponses];

export type EntriesGetEntryShareLinkData = {
  body?: never;
  path: {
    entry_id: string;
  };
  query?: never;
  url: "/api/v1/entries/{entry_id}/share_link";
};

export type EntriesGetEntryShareLinkErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type EntriesGetEntryShareLinkError =
  EntriesGetEntryShareLinkErrors[keyof EntriesGetEntryShareLinkErrors];

export type EntriesGetEntryShareLinkResponses = {
  /**
   * Successful Response
   */
  200: ShareLinkResponse;
};

export type EntriesGetEntryShareLinkResponse =
  EntriesGetEntryShareLinkResponses[keyof EntriesGetEntryShareLinkResponses];

export type EntriesGetEntryByShareLinkData = {
  body?: never;
  path: {
    share_link_id: string;
  };
  query?: never;
  url: "/api/v1/entries/share/{share_link_id}";
};

export type EntriesGetEntryByShareLinkErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type EntriesGetEntryByShareLinkError =
  EntriesGetEntryByShareLinkErrors[keyof EntriesGetEntryByShareLinkErrors];

export type EntriesGetEntryByShareLinkResponses = {
  /**
   * Successful Response
   */
  200: EntryDetailsResponse;
};

export type EntriesGetEntryByShareLinkResponse =
  EntriesGetEntryByShareLinkResponses[keyof EntriesGetEntryByShareLinkResponses];

export type ViewsListViewsForEntryData = {
  body?: never;
  path: {
    entry_id: string;
  };
  query?: never;
  url: "/api/v1/entries/{entry_id}/views";
};

export type ViewsListViewsForEntryErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ViewsListViewsForEntryError =
  ViewsListViewsForEntryErrors[keyof ViewsListViewsForEntryErrors];

export type ViewsListViewsForEntryResponses = {
  /**
   * Successful Response
   */
  200: Array<ViewResponse>;
};

export type ViewsListViewsForEntryResponse =
  ViewsListViewsForEntryResponses[keyof ViewsListViewsForEntryResponses];

export type ViewsCreateViewData = {
  body: ViewCreateRequest;
  path: {
    entry_id: string;
  };
  query?: never;
  url: "/api/v1/entries/{entry_id}/views";
};

export type ViewsCreateViewErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ViewsCreateViewError =
  ViewsCreateViewErrors[keyof ViewsCreateViewErrors];

export type ViewsCreateViewResponses = {
  /**
   * Successful Response
   */
  201: ViewResponse;
};

export type ViewsCreateViewResponse =
  ViewsCreateViewResponses[keyof ViewsCreateViewResponses];

export type ViewsDeleteViewData = {
  body?: never;
  path: {
    view_id: string;
  };
  query?: never;
  url: "/api/v1/entries/{entry_id}/views/{view_id}";
};

export type ViewsDeleteViewErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ViewsDeleteViewError =
  ViewsDeleteViewErrors[keyof ViewsDeleteViewErrors];

export type ViewsDeleteViewResponses = {
  /**
   * Successful Response
   */
  200: string;
};

export type ViewsDeleteViewResponse =
  ViewsDeleteViewResponses[keyof ViewsDeleteViewResponses];

export type ViewsGetViewData = {
  body?: never;
  path: {
    view_id: string;
  };
  query?: never;
  url: "/api/v1/entries/{entry_id}/views/{view_id}";
};

export type ViewsGetViewErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ViewsGetViewError = ViewsGetViewErrors[keyof ViewsGetViewErrors];

export type ViewsGetViewResponses = {
  /**
   * Successful Response
   */
  200: ViewResponse;
};

export type ViewsGetViewResponse =
  ViewsGetViewResponses[keyof ViewsGetViewResponses];

export type ViewsUpdateViewData = {
  body: ViewUpdateRequest;
  path: {
    entry_id: string;
    view_id: string;
  };
  query?: never;
  url: "/api/v1/entries/{entry_id}/views/{view_id}";
};

export type ViewsUpdateViewErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ViewsUpdateViewError =
  ViewsUpdateViewErrors[keyof ViewsUpdateViewErrors];

export type ViewsUpdateViewResponses = {
  /**
   * Successful Response
   */
  200: ViewResponse;
};

export type ViewsUpdateViewResponse =
  ViewsUpdateViewResponses[keyof ViewsUpdateViewResponses];

export type ShareLinksGetShareLinkData = {
  body?: never;
  path: {
    share_link_id: string;
  };
  query?: never;
  url: "/api/v1/share_links/{share_link_id}";
};

export type ShareLinksGetShareLinkErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ShareLinksGetShareLinkError =
  ShareLinksGetShareLinkErrors[keyof ShareLinksGetShareLinkErrors];

export type ShareLinksGetShareLinkResponses = {
  /**
   * Successful Response
   */
  200: ShareLinkResponse;
};

export type ShareLinksGetShareLinkResponse =
  ShareLinksGetShareLinkResponses[keyof ShareLinksGetShareLinkResponses];

export type ShareLinksUpdateShareLinkData = {
  body: ShareLinkUpdateRequest;
  path: {
    share_link_id: string;
  };
  query?: never;
  url: "/api/v1/share_links/{share_link_id}";
};

export type ShareLinksUpdateShareLinkErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ShareLinksUpdateShareLinkError =
  ShareLinksUpdateShareLinkErrors[keyof ShareLinksUpdateShareLinkErrors];

export type ShareLinksUpdateShareLinkResponses = {
  /**
   * Successful Response
   */
  200: ShareLinkResponse;
};

export type ShareLinksUpdateShareLinkResponse =
  ShareLinksUpdateShareLinkResponses[keyof ShareLinksUpdateShareLinkResponses];

export type AuthLoginAdminData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/auth/login/admin";
};

export type AuthLoginAdminResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type AuthLoginUserData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/auth/login/user";
};

export type AuthLoginUserResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type AuthLogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/auth/logout";
};

export type AuthLogoutResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type AuthReadUsersMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/auth/get_current_user";
};

export type AuthReadUsersMeResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type AuthProtectedRouteData = {
  body?: never;
  headers?: {
    authorization?: string | null;
  };
  path?: never;
  query?: never;
  url: "/api/v1/auth/get_auth_header";
};

export type AuthProtectedRouteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthProtectedRouteError =
  AuthProtectedRouteErrors[keyof AuthProtectedRouteErrors];

export type AuthProtectedRouteResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type AuthCheckAuthData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/auth/check-auth";
};

export type AuthCheckAuthResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type TestBackgroundTaskData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/test/background-task";
};

export type TestBackgroundTaskResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type ClientOptions = {
  baseUrl: "http://127.0.0.1:8000" | (string & {});
};
