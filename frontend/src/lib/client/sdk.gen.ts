// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from "@hey-api/client-fetch";
import type {
  EntriesListEntriesData,
  EntriesListEntriesResponse,
  EntriesListEntriesError,
  EntriesCreateEntryData,
  EntriesCreateEntryResponse,
  EntriesCreateEntryError,
  EntriesListEntriesForUserData,
  EntriesListEntriesForUserResponse,
  EntriesListEntriesForUserError,
  EntriesDeleteEntryData,
  EntriesDeleteEntryResponse,
  EntriesDeleteEntryError,
  EntriesGetEntryData,
  EntriesGetEntryResponse,
  EntriesGetEntryError,
  EntriesUpdateEntryData,
  EntriesUpdateEntryResponse,
  EntriesUpdateEntryError,
  EntriesGetEntryShareLinkData,
  EntriesGetEntryShareLinkResponse,
  EntriesGetEntryShareLinkError,
  EntriesGetEntryByShareLinkData,
  EntriesGetEntryByShareLinkResponse,
  EntriesGetEntryByShareLinkError,
  ViewsListViewsForEntryData,
  ViewsListViewsForEntryResponse,
  ViewsListViewsForEntryError,
  ViewsCreateViewData,
  ViewsCreateViewResponse,
  ViewsCreateViewError,
  ViewsDeleteViewData,
  ViewsDeleteViewResponse,
  ViewsDeleteViewError,
  ViewsGetViewData,
  ViewsGetViewResponse,
  ViewsGetViewError,
  ViewsUpdateViewData,
  ViewsUpdateViewResponse,
  ViewsUpdateViewError,
  ViewsGetViewSnapshotData,
  ViewsGetViewSnapshotError,
  ShareLinksGetShareLinkData,
  ShareLinksGetShareLinkResponse,
  ShareLinksGetShareLinkError,
  ShareLinksUpdateShareLinkData,
  ShareLinksUpdateShareLinkResponse,
  ShareLinksUpdateShareLinkError,
  AuthLoginAdminData,
  AuthLoginUserData,
  AuthLogoutData,
  AuthReadUsersMeData,
  AuthProtectedRouteData,
  AuthProtectedRouteError,
  AuthCheckAuthData,
  TestBackgroundTaskData,
} from "./types.gen";
import {
  zEntriesListEntriesResponse,
  zEntriesCreateEntryResponse,
  zEntriesListEntriesForUserResponse,
  zEntriesDeleteEntryResponse,
  zEntriesGetEntryResponse,
  zEntriesUpdateEntryResponse,
  zEntriesGetEntryShareLinkResponse,
  zEntriesGetEntryByShareLinkResponse,
  zViewsListViewsForEntryResponse,
  zViewsCreateViewResponse,
  zViewsDeleteViewResponse,
  zViewsGetViewResponse,
  zViewsUpdateViewResponse,
  zShareLinksGetShareLinkResponse,
  zShareLinksUpdateShareLinkResponse,
} from "./zod.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * List Entries
 */
export const entriesListEntries = <ThrowOnError extends boolean = false>(
  options?: Options<EntriesListEntriesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    EntriesListEntriesResponse,
    EntriesListEntriesError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zEntriesListEntriesResponse.parseAsync(data);
    },
    url: "/api/v1/entries",
    ...options,
  });
};

/**
 * Create Entry
 */
export const entriesCreateEntry = <ThrowOnError extends boolean = false>(
  options: Options<EntriesCreateEntryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    EntriesCreateEntryResponse,
    EntriesCreateEntryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zEntriesCreateEntryResponse.parseAsync(data);
    },
    url: "/api/v1/entries",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List Entries For User
 */
export const entriesListEntriesForUser = <ThrowOnError extends boolean = false>(
  options?: Options<EntriesListEntriesForUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    EntriesListEntriesForUserResponse,
    EntriesListEntriesForUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zEntriesListEntriesForUserResponse.parseAsync(data);
    },
    url: "/api/v1/entries/user",
    ...options,
  });
};

/**
 * Delete Entry
 */
export const entriesDeleteEntry = <ThrowOnError extends boolean = false>(
  options: Options<EntriesDeleteEntryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    EntriesDeleteEntryResponse,
    EntriesDeleteEntryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zEntriesDeleteEntryResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}",
    ...options,
  });
};

/**
 * Get Entry
 */
export const entriesGetEntry = <ThrowOnError extends boolean = false>(
  options: Options<EntriesGetEntryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    EntriesGetEntryResponse,
    EntriesGetEntryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zEntriesGetEntryResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}",
    ...options,
  });
};

/**
 * Update Entry
 */
export const entriesUpdateEntry = <ThrowOnError extends boolean = false>(
  options: Options<EntriesUpdateEntryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    EntriesUpdateEntryResponse,
    EntriesUpdateEntryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zEntriesUpdateEntryResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Entry Share Link
 */
export const entriesGetEntryShareLink = <ThrowOnError extends boolean = false>(
  options: Options<EntriesGetEntryShareLinkData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    EntriesGetEntryShareLinkResponse,
    EntriesGetEntryShareLinkError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zEntriesGetEntryShareLinkResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}/share_link",
    ...options,
  });
};

/**
 * Get Entry By Share Link
 */
export const entriesGetEntryByShareLink = <
  ThrowOnError extends boolean = false,
>(
  options: Options<EntriesGetEntryByShareLinkData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    EntriesGetEntryByShareLinkResponse,
    EntriesGetEntryByShareLinkError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zEntriesGetEntryByShareLinkResponse.parseAsync(data);
    },
    url: "/api/v1/entries/share/{share_link_id}",
    ...options,
  });
};

/**
 * List Views For Entry
 */
export const viewsListViewsForEntry = <ThrowOnError extends boolean = false>(
  options: Options<ViewsListViewsForEntryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ViewsListViewsForEntryResponse,
    ViewsListViewsForEntryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zViewsListViewsForEntryResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}/views",
    ...options,
  });
};

/**
 * Create View
 */
export const viewsCreateView = <ThrowOnError extends boolean = false>(
  options: Options<ViewsCreateViewData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ViewsCreateViewResponse,
    ViewsCreateViewError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zViewsCreateViewResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}/views",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Delete View
 */
export const viewsDeleteView = <ThrowOnError extends boolean = false>(
  options: Options<ViewsDeleteViewData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    ViewsDeleteViewResponse,
    ViewsDeleteViewError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zViewsDeleteViewResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}/views/{view_id}",
    ...options,
  });
};

/**
 * Get View
 */
export const viewsGetView = <ThrowOnError extends boolean = false>(
  options: Options<ViewsGetViewData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ViewsGetViewResponse,
    ViewsGetViewError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zViewsGetViewResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}/views/{view_id}",
    ...options,
  });
};

/**
 * Update View
 */
export const viewsUpdateView = <ThrowOnError extends boolean = false>(
  options: Options<ViewsUpdateViewData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ViewsUpdateViewResponse,
    ViewsUpdateViewError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zViewsUpdateViewResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}/views/{view_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get View Snapshot
 */
export const viewsGetViewSnapshot = <ThrowOnError extends boolean = false>(
  options: Options<ViewsGetViewSnapshotData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    ViewsGetViewSnapshotError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/entries/{entry_id}/views/{view_id}/snapshot.json",
    ...options,
  });
};

/**
 * Get Share Link
 */
export const shareLinksGetShareLink = <ThrowOnError extends boolean = false>(
  options: Options<ShareLinksGetShareLinkData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ShareLinksGetShareLinkResponse,
    ShareLinksGetShareLinkError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zShareLinksGetShareLinkResponse.parseAsync(data);
    },
    url: "/api/v1/share_links/{share_link_id}",
    ...options,
  });
};

/**
 * Update Share Link
 */
export const shareLinksUpdateShareLink = <ThrowOnError extends boolean = false>(
  options: Options<ShareLinksUpdateShareLinkData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ShareLinksUpdateShareLinkResponse,
    ShareLinksUpdateShareLinkError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseValidator: async (data) => {
      return await zShareLinksUpdateShareLinkResponse.parseAsync(data);
    },
    url: "/api/v1/share_links/{share_link_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Login Admin
 */
export const authLoginAdmin = <ThrowOnError extends boolean = false>(
  options?: Options<AuthLoginAdminData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/auth/login/admin",
    ...options,
  });
};

/**
 * Login User
 */
export const authLoginUser = <ThrowOnError extends boolean = false>(
  options?: Options<AuthLoginUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/auth/login/user",
    ...options,
  });
};

/**
 * Logout
 */
export const authLogout = <ThrowOnError extends boolean = false>(
  options?: Options<AuthLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/logout",
    ...options,
  });
};

/**
 * Read Users Me
 */
export const authReadUsersMe = <ThrowOnError extends boolean = false>(
  options?: Options<AuthReadUsersMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/auth/get_current_user",
      ...options,
    },
  );
};

/**
 * Protected Route
 */
export const authProtectedRoute = <ThrowOnError extends boolean = false>(
  options?: Options<AuthProtectedRouteData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    unknown,
    AuthProtectedRouteError,
    ThrowOnError
  >({
    url: "/api/v1/auth/get_auth_header",
    ...options,
  });
};

/**
 * Check Auth
 */
export const authCheckAuth = <ThrowOnError extends boolean = false>(
  options?: Options<AuthCheckAuthData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/auth/check-auth",
      ...options,
    },
  );
};

/**
 * Background Task
 */
export const testBackgroundTask = <ThrowOnError extends boolean = false>(
  options?: Options<TestBackgroundTaskData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: "/api/v1/test/background-task",
      ...options,
    },
  );
};
