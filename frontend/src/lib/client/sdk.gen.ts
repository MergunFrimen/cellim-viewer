// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from "@hey-api/client-fetch";
import type {
  EntriesListPublicEntriesData,
  EntriesListPublicEntriesResponse,
  EntriesListPublicEntriesError,
  EntriesCreateEntryData,
  EntriesCreateEntryResponse,
  EntriesCreateEntryError,
  EntriesDeleteEntryData,
  EntriesDeleteEntryResponse,
  EntriesDeleteEntryError,
  EntriesGetEntryByIdData,
  EntriesGetEntryByIdResponse,
  EntriesGetEntryByIdError,
  EntriesUpdateEntryData,
  EntriesUpdateEntryResponse,
  EntriesUpdateEntryError,
  EntriesGetEntryByShareLinkData,
  EntriesGetEntryByShareLinkResponse,
  EntriesGetEntryByShareLinkError,
  EntriesGetEntryShareLinkData,
  EntriesGetEntryShareLinkResponse,
  EntriesGetEntryShareLinkError,
  EntriesGetEntryThumbnailViewData,
  EntriesGetEntryThumbnailViewResponse,
  EntriesGetEntryThumbnailViewError,
  ViewsListViewsForEntryData,
  ViewsListViewsForEntryResponse,
  ViewsListViewsForEntryError,
  ViewsCreateViewData,
  ViewsCreateViewResponse,
  ViewsCreateViewError,
  ViewsDeleteViewData,
  ViewsDeleteViewResponse,
  ViewsDeleteViewError,
  ViewsGetViewByIdData,
  ViewsGetViewByIdResponse,
  ViewsGetViewByIdError,
  ViewsUpdateViewData,
  ViewsUpdateViewResponse,
  ViewsUpdateViewError,
  ViewsGetViewSnapshotData,
  ViewsGetViewSnapshotError,
  ViewsGetViewThumbnailImageData,
  ViewsGetViewThumbnailImageError,
  MeListEntriesForUserData,
  MeListEntriesForUserResponse,
  MeListEntriesForUserError,
  MeListVolsegEntriesForUserData,
  MeListVolsegEntriesForUserResponse,
  ShareLinksGetShareLinkData,
  ShareLinksGetShareLinkResponse,
  ShareLinksGetShareLinkError,
  ShareLinksUpdateShareLinkData,
  ShareLinksUpdateShareLinkResponse,
  ShareLinksUpdateShareLinkError,
  AuthLoginUserData,
  AuthLogoutData,
  AuthReadUsersMeData,
  AuthReadUsersMeResponse,
  AuthGetUsersTokenData,
  AuthGetUsersTokenResponse,
  AuthVerifyAuthData,
  AuthVerifyAuthResponse,
  TestUploadFileData,
  TestUploadFileError,
  VolsegEntriesListPublicEntriesData,
  VolsegEntriesListPublicEntriesResponse,
  VolsegEntriesUploadEntryData,
  VolsegEntriesUploadEntryResponse,
  VolsegEntriesUploadEntryError,
  VolsegEntriesDeleteViewData,
  VolsegEntriesDeleteViewResponse,
  VolsegEntriesDeleteViewError,
  VolsegEntriesGetEntryByIdData,
  VolsegEntriesGetEntryByIdResponse,
  VolsegEntriesGetEntryByIdError,
} from "./types.gen";
import {
  zEntriesListPublicEntriesResponse,
  zEntriesCreateEntryResponse,
  zEntriesDeleteEntryResponse,
  zEntriesGetEntryByIdResponse,
  zEntriesUpdateEntryResponse,
  zEntriesGetEntryByShareLinkResponse,
  zEntriesGetEntryShareLinkResponse,
  zEntriesGetEntryThumbnailViewResponse,
  zViewsListViewsForEntryResponse,
  zViewsCreateViewResponse,
  zViewsDeleteViewResponse,
  zViewsGetViewByIdResponse,
  zViewsUpdateViewResponse,
  zMeListEntriesForUserResponse,
  zMeListVolsegEntriesForUserResponse,
  zShareLinksGetShareLinkResponse,
  zShareLinksUpdateShareLinkResponse,
  zAuthReadUsersMeResponse,
  zAuthGetUsersTokenResponse,
  zAuthVerifyAuthResponse,
  zVolsegEntriesListPublicEntriesResponse,
  zVolsegEntriesUploadEntryResponse,
  zVolsegEntriesDeleteViewResponse,
  zVolsegEntriesGetEntryByIdResponse,
} from "./zod.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * List Public Entries
 */
export const entriesListPublicEntries = <ThrowOnError extends boolean = false>(
  options?: Options<EntriesListPublicEntriesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    EntriesListPublicEntriesResponse,
    EntriesListPublicEntriesError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zEntriesListPublicEntriesResponse.parseAsync(data);
    },
    url: "/api/v1/entries",
    ...options,
  });
};

/**
 * Create Entry
 */
export const entriesCreateEntry = <ThrowOnError extends boolean = false>(
  options: Options<EntriesCreateEntryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    EntriesCreateEntryResponse,
    EntriesCreateEntryError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zEntriesCreateEntryResponse.parseAsync(data);
    },
    url: "/api/v1/entries",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Entry
 */
export const entriesDeleteEntry = <ThrowOnError extends boolean = false>(
  options: Options<EntriesDeleteEntryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    EntriesDeleteEntryResponse,
    EntriesDeleteEntryError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zEntriesDeleteEntryResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}",
    ...options,
  });
};

/**
 * Get Entry By Id
 */
export const entriesGetEntryById = <ThrowOnError extends boolean = false>(
  options: Options<EntriesGetEntryByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    EntriesGetEntryByIdResponse,
    EntriesGetEntryByIdError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zEntriesGetEntryByIdResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}",
    ...options,
  });
};

/**
 * Update Entry
 */
export const entriesUpdateEntry = <ThrowOnError extends boolean = false>(
  options: Options<EntriesUpdateEntryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    EntriesUpdateEntryResponse,
    EntriesUpdateEntryError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zEntriesUpdateEntryResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Entry By Share Link
 */
export const entriesGetEntryByShareLink = <
  ThrowOnError extends boolean = false,
>(
  options: Options<EntriesGetEntryByShareLinkData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    EntriesGetEntryByShareLinkResponse,
    EntriesGetEntryByShareLinkError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zEntriesGetEntryByShareLinkResponse.parseAsync(data);
    },
    url: "/api/v1/entries/share/{share_link_id}",
    ...options,
  });
};

/**
 * Get Entry Share Link
 */
export const entriesGetEntryShareLink = <ThrowOnError extends boolean = false>(
  options: Options<EntriesGetEntryShareLinkData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    EntriesGetEntryShareLinkResponse,
    EntriesGetEntryShareLinkError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zEntriesGetEntryShareLinkResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}/share_link",
    ...options,
  });
};

/**
 * Get Entry Thumbnail View
 */
export const entriesGetEntryThumbnailView = <
  ThrowOnError extends boolean = false,
>(
  options: Options<EntriesGetEntryThumbnailViewData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    EntriesGetEntryThumbnailViewResponse,
    EntriesGetEntryThumbnailViewError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zEntriesGetEntryThumbnailViewResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}/thumbnail",
    ...options,
  });
};

/**
 * List Views For Entry
 */
export const viewsListViewsForEntry = <ThrowOnError extends boolean = false>(
  options: Options<ViewsListViewsForEntryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ViewsListViewsForEntryResponse,
    ViewsListViewsForEntryError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zViewsListViewsForEntryResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}/views",
    ...options,
  });
};

/**
 * Create View
 */
export const viewsCreateView = <ThrowOnError extends boolean = false>(
  options: Options<ViewsCreateViewData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ViewsCreateViewResponse,
    ViewsCreateViewError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    responseValidator: async (data) => {
      return await zViewsCreateViewResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}/views",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Delete View
 */
export const viewsDeleteView = <ThrowOnError extends boolean = false>(
  options: Options<ViewsDeleteViewData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    ViewsDeleteViewResponse,
    ViewsDeleteViewError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zViewsDeleteViewResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}/views/{view_id}",
    ...options,
  });
};

/**
 * Get View By Id
 */
export const viewsGetViewById = <ThrowOnError extends boolean = false>(
  options: Options<ViewsGetViewByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ViewsGetViewByIdResponse,
    ViewsGetViewByIdError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zViewsGetViewByIdResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}/views/{view_id}",
    ...options,
  });
};

/**
 * Update View
 */
export const viewsUpdateView = <ThrowOnError extends boolean = false>(
  options: Options<ViewsUpdateViewData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ViewsUpdateViewResponse,
    ViewsUpdateViewError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zViewsUpdateViewResponse.parseAsync(data);
    },
    url: "/api/v1/entries/{entry_id}/views/{view_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get View Snapshot
 */
export const viewsGetViewSnapshot = <ThrowOnError extends boolean = false>(
  options: Options<ViewsGetViewSnapshotData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    ViewsGetViewSnapshotError,
    ThrowOnError
  >({
    url: "/api/v1/entries/{entry_id}/views/{view_id}/snapshot",
    ...options,
  });
};

/**
 * Get View Thumbnail Image
 */
export const viewsGetViewThumbnailImage = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ViewsGetViewThumbnailImageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    ViewsGetViewThumbnailImageError,
    ThrowOnError
  >({
    url: "/api/v1/entries/{entry_id}/views/{view_id}/thumbnail",
    ...options,
  });
};

/**
 * List Entries For User
 */
export const meListEntriesForUser = <ThrowOnError extends boolean = false>(
  options?: Options<MeListEntriesForUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    MeListEntriesForUserResponse,
    MeListEntriesForUserError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zMeListEntriesForUserResponse.parseAsync(data);
    },
    url: "/api/v1/me/entries",
    ...options,
  });
};

/**
 * List Volseg Entries For User
 */
export const meListVolsegEntriesForUser = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<MeListVolsegEntriesForUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    MeListVolsegEntriesForUserResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zMeListVolsegEntriesForUserResponse.parseAsync(data);
    },
    url: "/api/v1/me/volseg",
    ...options,
  });
};

/**
 * Get Share Link
 */
export const shareLinksGetShareLink = <ThrowOnError extends boolean = false>(
  options: Options<ShareLinksGetShareLinkData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ShareLinksGetShareLinkResponse,
    ShareLinksGetShareLinkError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zShareLinksGetShareLinkResponse.parseAsync(data);
    },
    url: "/api/v1/share_links/{share_link_id}",
    ...options,
  });
};

/**
 * Update Share Link
 */
export const shareLinksUpdateShareLink = <ThrowOnError extends boolean = false>(
  options: Options<ShareLinksUpdateShareLinkData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ShareLinksUpdateShareLinkResponse,
    ShareLinksUpdateShareLinkError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zShareLinksUpdateShareLinkResponse.parseAsync(data);
    },
    url: "/api/v1/share_links/{share_link_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Login User
 */
export const authLoginUser = <ThrowOnError extends boolean = false>(
  options?: Options<AuthLoginUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/auth/login",
    ...options,
  });
};

/**
 * Logout
 */
export const authLogout = <ThrowOnError extends boolean = false>(
  options?: Options<AuthLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/auth/logout",
    ...options,
  });
};

/**
 * Read Users Me
 */
export const authReadUsersMe = <ThrowOnError extends boolean = false>(
  options?: Options<AuthReadUsersMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthReadUsersMeResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zAuthReadUsersMeResponse.parseAsync(data);
    },
    url: "/api/v1/auth/me/user",
    ...options,
  });
};

/**
 * Get Users Token
 */
export const authGetUsersToken = <ThrowOnError extends boolean = false>(
  options?: Options<AuthGetUsersTokenData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthGetUsersTokenResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zAuthGetUsersTokenResponse.parseAsync(data);
    },
    url: "/api/v1/auth/me/token",
    ...options,
  });
};

/**
 * Verify Auth
 */
export const authVerifyAuth = <ThrowOnError extends boolean = false>(
  options?: Options<AuthVerifyAuthData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthVerifyAuthResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zAuthVerifyAuthResponse.parseAsync(data);
    },
    url: "/api/v1/auth/verify",
    ...options,
  });
};

/**
 * Upload File
 */
export const testUploadFile = <ThrowOnError extends boolean = false>(
  options: Options<TestUploadFileData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    TestUploadFileError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    url: "/api/v1/test/upload",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * List Public Entries
 */
export const volsegEntriesListPublicEntries = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<VolsegEntriesListPublicEntriesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    VolsegEntriesListPublicEntriesResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zVolsegEntriesListPublicEntriesResponse.parseAsync(data);
    },
    url: "/api/v1/volseg",
    ...options,
  });
};

/**
 * Upload Entry
 */
export const volsegEntriesUploadEntry = <ThrowOnError extends boolean = false>(
  options: Options<VolsegEntriesUploadEntryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    VolsegEntriesUploadEntryResponse,
    VolsegEntriesUploadEntryError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    responseValidator: async (data) => {
      return await zVolsegEntriesUploadEntryResponse.parseAsync(data);
    },
    url: "/api/v1/volseg",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Delete View
 */
export const volsegEntriesDeleteView = <ThrowOnError extends boolean = false>(
  options: Options<VolsegEntriesDeleteViewData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    VolsegEntriesDeleteViewResponse,
    VolsegEntriesDeleteViewError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zVolsegEntriesDeleteViewResponse.parseAsync(data);
    },
    url: "/api/v1/volseg/{volseg_entry_id}",
    ...options,
  });
};

/**
 * Get Entry By Id
 */
export const volsegEntriesGetEntryById = <ThrowOnError extends boolean = false>(
  options: Options<VolsegEntriesGetEntryByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    VolsegEntriesGetEntryByIdResponse,
    VolsegEntriesGetEntryByIdError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zVolsegEntriesGetEntryByIdResponse.parseAsync(data);
    },
    url: "/api/v1/volseg/{volseg_entry_id}",
    ...options,
  });
};
