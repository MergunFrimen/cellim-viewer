// This file is auto-generated by @hey-api/openapi-ts

export type EntryCreateRequest = {
    name: string;
    description?: string | null;
    is_public?: boolean;
};

export type EntryUpdateRequest = {
    name?: string | null;
    description?: string | null;
    is_public?: boolean | null;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type PaginatedResponsePrivateEntryDetailsResponse = {
    current_page?: number;
    per_page?: number;
    total_pages: number;
    total_items: number;
    items: Array<PrivateEntryDetailsResponse>;
};

export type PaginatedResponsePublicEntryPreviewResponse = {
    current_page?: number;
    per_page?: number;
    total_pages: number;
    total_items: number;
    items: Array<PublicEntryPreviewResponse>;
};

export type PrivateEntryDetailsResponse = {
    response_model?: string;
    id: string;
    created_at: string;
    updated_at: string;
    name: string;
    description?: string | null;
    thumbnail_url?: string | null;
    is_public: boolean;
    views: Array<PrivateViewResponse>;
    link: PrivateShareLinkResponse;
};

export type PrivateShareLinkResponse = {
    id: string;
    is_editable: boolean;
    is_active: boolean;
};

export type PrivateViewResponse = {
    response_model?: string;
    created_at: string;
    updated_at: string;
    id: string;
    name: string;
    description?: string | null;
    thumbnail_url?: string | null;
    snapshot_url?: string | null;
};

export type PublicEntryDetailsResponse = {
    response_model?: string;
    id: string;
    created_at: string;
    updated_at: string;
    name: string;
    description?: string | null;
    thumbnail_url?: string | null;
    views: Array<PublicViewResponse>;
};

export type PublicEntryPreviewResponse = {
    response_model?: string;
    id: string;
    created_at: string;
    updated_at: string;
    name: string;
    description?: string | null;
    thumbnail_url?: string | null;
};

export type PublicViewResponse = {
    response_model?: string;
    created_at: string;
    updated_at: string;
    id: string;
    name: string;
    description?: string | null;
    thumbnail_url?: string | null;
    snapshot_url?: string | null;
};

export type ShareLinkUpdateRequest = {
    is_editable?: boolean | null;
    is_active?: boolean | null;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type ViewCreateRequest = {
    name: string;
    description?: string | null;
    /**
     * Mol* state file (.molj file)
     */
    snapshot_json: Blob | File;
    /**
     * Thumbnail image for view
     */
    thumbnail_image?: (Blob | File) | null;
};

export type ViewResponse = {
    created_at: string;
    updated_at: string;
    id: string;
    name: string;
    description?: string | null;
    thumbnail_url?: string | null;
    snapshot_url?: string | null;
};

export type ViewUpdateRequest = {
    name: string;
    description?: string | null;
};

export type ListEntriesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Keywords to search by in entry titles and descriptions.
         */
        search_term?: Array<string> | null;
        page?: number;
        per_page?: number;
    };
    url: '/api/v1/entries';
};

export type ListEntriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListEntriesError = ListEntriesErrors[keyof ListEntriesErrors];

export type ListEntriesResponses = {
    /**
     * Successful Response
     */
    200: PaginatedResponsePublicEntryPreviewResponse;
};

export type ListEntriesResponse = ListEntriesResponses[keyof ListEntriesResponses];

export type CreateEntryData = {
    body: EntryCreateRequest;
    path?: never;
    query?: never;
    url: '/api/v1/entries';
};

export type CreateEntryErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateEntryError = CreateEntryErrors[keyof CreateEntryErrors];

export type CreateEntryResponses = {
    /**
     * Successful Response
     */
    201: PrivateEntryDetailsResponse;
};

export type CreateEntryResponse = CreateEntryResponses[keyof CreateEntryResponses];

export type ListEntriesForUserData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Keywords to search by in entry titles and descriptions.
         */
        search_term?: Array<string> | null;
        page?: number;
        per_page?: number;
    };
    url: '/api/v1/entries/user';
};

export type ListEntriesForUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListEntriesForUserError = ListEntriesForUserErrors[keyof ListEntriesForUserErrors];

export type ListEntriesForUserResponses = {
    /**
     * Successful Response
     */
    200: PaginatedResponsePrivateEntryDetailsResponse;
};

export type ListEntriesForUserResponse = ListEntriesForUserResponses[keyof ListEntriesForUserResponses];

export type DeleteEntryData = {
    body?: never;
    path: {
        entry_id: string;
    };
    query?: never;
    url: '/api/v1/entries/{entry_id}';
};

export type DeleteEntryErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteEntryError = DeleteEntryErrors[keyof DeleteEntryErrors];

export type DeleteEntryResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteEntryResponse = DeleteEntryResponses[keyof DeleteEntryResponses];

export type GetEntryData = {
    body?: never;
    path: {
        entry_id: string;
    };
    query?: never;
    url: '/api/v1/entries/{entry_id}';
};

export type GetEntryErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetEntryError = GetEntryErrors[keyof GetEntryErrors];

export type GetEntryResponses = {
    /**
     * Successful Response
     */
    200: PrivateEntryDetailsResponse | PublicEntryDetailsResponse;
};

export type GetEntryResponse = GetEntryResponses[keyof GetEntryResponses];

export type UpdateEntryData = {
    body: EntryUpdateRequest;
    path: {
        entry_id: string;
    };
    query?: never;
    url: '/api/v1/entries/{entry_id}';
};

export type UpdateEntryErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateEntryError = UpdateEntryErrors[keyof UpdateEntryErrors];

export type UpdateEntryResponses = {
    /**
     * Successful Response
     */
    200: PrivateEntryDetailsResponse;
};

export type UpdateEntryResponse = UpdateEntryResponses[keyof UpdateEntryResponses];

export type GetEntryByShareLinkData = {
    body?: never;
    path: {
        share_link_id: string;
    };
    query?: never;
    url: '/api/v1/entries/share/{share_link_id}';
};

export type GetEntryByShareLinkErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetEntryByShareLinkError = GetEntryByShareLinkErrors[keyof GetEntryByShareLinkErrors];

export type GetEntryByShareLinkResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListViewsForEntryData = {
    body?: never;
    path: {
        entry_id: string;
    };
    query?: never;
    url: '/api/v1/entries/{entry_id}/views';
};

export type ListViewsForEntryErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListViewsForEntryError = ListViewsForEntryErrors[keyof ListViewsForEntryErrors];

export type ListViewsForEntryResponses = {
    /**
     * Successful Response
     */
    200: Array<PrivateViewResponse | PublicViewResponse>;
};

export type ListViewsForEntryResponse = ListViewsForEntryResponses[keyof ListViewsForEntryResponses];

export type CreateViewData = {
    body: ViewCreateRequest;
    path: {
        entry_id: string;
    };
    query?: never;
    url: '/api/v1/entries/{entry_id}/views';
};

export type CreateViewErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateViewError = CreateViewErrors[keyof CreateViewErrors];

export type CreateViewResponses = {
    /**
     * Successful Response
     */
    201: PrivateViewResponse;
};

export type CreateViewResponse = CreateViewResponses[keyof CreateViewResponses];

export type DeleteViewData = {
    body?: never;
    path: {
        view_id: string;
    };
    query?: never;
    url: '/api/v1/entries/{entry_id}/views/{view_id}';
};

export type DeleteViewErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteViewError = DeleteViewErrors[keyof DeleteViewErrors];

export type DeleteViewResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteViewResponse = DeleteViewResponses[keyof DeleteViewResponses];

export type GetViewData = {
    body?: never;
    path: {
        view_id: string;
    };
    query?: never;
    url: '/api/v1/entries/{entry_id}/views/{view_id}';
};

export type GetViewErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetViewError = GetViewErrors[keyof GetViewErrors];

export type GetViewResponses = {
    /**
     * Successful Response
     */
    200: PrivateViewResponse | PublicViewResponse;
};

export type GetViewResponse = GetViewResponses[keyof GetViewResponses];

export type UpdateViewData = {
    body: ViewUpdateRequest;
    path: {
        view_id: string;
    };
    query?: never;
    url: '/api/v1/entries/{entry_id}/views/{view_id}';
};

export type UpdateViewErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateViewError = UpdateViewErrors[keyof UpdateViewErrors];

export type UpdateViewResponses = {
    /**
     * Successful Response
     */
    200: ViewResponse;
};

export type UpdateViewResponse = UpdateViewResponses[keyof UpdateViewResponses];

export type GetShareLinkData = {
    body?: never;
    path: {
        share_link_id: string;
    };
    query?: never;
    url: '/api/v1/share_links/{share_link_id}';
};

export type GetShareLinkErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetShareLinkError = GetShareLinkErrors[keyof GetShareLinkErrors];

export type GetShareLinkResponses = {
    /**
     * Successful Response
     */
    200: PrivateShareLinkResponse;
};

export type GetShareLinkResponse = GetShareLinkResponses[keyof GetShareLinkResponses];

export type UpdateShareLinkData = {
    body: ShareLinkUpdateRequest;
    path: {
        share_link_id: string;
    };
    query?: never;
    url: '/api/v1/share_links/{share_link_id}';
};

export type UpdateShareLinkErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateShareLinkError = UpdateShareLinkErrors[keyof UpdateShareLinkErrors];

export type UpdateShareLinkResponses = {
    /**
     * Successful Response
     */
    200: PrivateShareLinkResponse;
};

export type UpdateShareLinkResponse = UpdateShareLinkResponses[keyof UpdateShareLinkResponses];

export type LoginAdminData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/login/admin';
};

export type LoginAdminResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LoginUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/login/user';
};

export type LoginUserResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ReadUsersMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/get_current_user';
};

export type ReadUsersMeResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ProtectedRouteData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/auth/get_auth_header';
};

export type ProtectedRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProtectedRouteError = ProtectedRouteErrors[keyof ProtectedRouteErrors];

export type ProtectedRouteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type BackgroundTaskData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/test/background-task';
};

export type BackgroundTaskResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};