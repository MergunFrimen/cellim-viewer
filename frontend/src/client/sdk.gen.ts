// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { ListEntriesData, ListEntriesResponse, ListEntriesError, CreateEntryData, CreateEntryResponse, CreateEntryError, ListEntriesForUserData, ListEntriesForUserResponse, ListEntriesForUserError, DeleteEntryData, DeleteEntryResponse, DeleteEntryError, GetEntryData, GetEntryResponse, GetEntryError, UpdateEntryData, UpdateEntryResponse, UpdateEntryError, GetEntryByShareLinkData, GetEntryByShareLinkError, ListViewsForEntryData, ListViewsForEntryResponse, ListViewsForEntryError, CreateViewData, CreateViewResponse, CreateViewError, DeleteViewData, DeleteViewResponse, DeleteViewError, GetViewData, GetViewResponse, GetViewError, UpdateViewData, UpdateViewResponse, UpdateViewError, GetShareLinkData, GetShareLinkResponse, GetShareLinkError, UpdateShareLinkData, UpdateShareLinkResponse, UpdateShareLinkError, LoginAdminData, LoginUserData, ReadUsersMeData, ProtectedRouteData, ProtectedRouteError, BackgroundTaskData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List Entries
 */
export const listEntries = <ThrowOnError extends boolean = false>(options?: Options<ListEntriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListEntriesResponse, ListEntriesError, ThrowOnError>({
        url: '/api/v1/entries',
        ...options
    });
};

/**
 * Create Entry
 */
export const createEntry = <ThrowOnError extends boolean = false>(options: Options<CreateEntryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateEntryResponse, CreateEntryError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/entries',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Entries For User
 */
export const listEntriesForUser = <ThrowOnError extends boolean = false>(options?: Options<ListEntriesForUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListEntriesForUserResponse, ListEntriesForUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/entries/user',
        ...options
    });
};

/**
 * Delete Entry
 */
export const deleteEntry = <ThrowOnError extends boolean = false>(options: Options<DeleteEntryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteEntryResponse, DeleteEntryError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/entries/{entry_id}',
        ...options
    });
};

/**
 * Get Entry
 */
export const getEntry = <ThrowOnError extends boolean = false>(options: Options<GetEntryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEntryResponse, GetEntryError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/entries/{entry_id}',
        ...options
    });
};

/**
 * Update Entry
 */
export const updateEntry = <ThrowOnError extends boolean = false>(options: Options<UpdateEntryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateEntryResponse, UpdateEntryError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/entries/{entry_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Entry By Share Link
 */
export const getEntryByShareLink = <ThrowOnError extends boolean = false>(options: Options<GetEntryByShareLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetEntryByShareLinkError, ThrowOnError>({
        url: '/api/v1/entries/share/{share_link_id}',
        ...options
    });
};

/**
 * List Views For Entry
 */
export const listViewsForEntry = <ThrowOnError extends boolean = false>(options: Options<ListViewsForEntryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListViewsForEntryResponse, ListViewsForEntryError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/entries/{entry_id}/views',
        ...options
    });
};

/**
 * Create View
 */
export const createView = <ThrowOnError extends boolean = false>(options: Options<CreateViewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateViewResponse, CreateViewError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/entries/{entry_id}/views',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Delete View
 */
export const deleteView = <ThrowOnError extends boolean = false>(options: Options<DeleteViewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteViewResponse, DeleteViewError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/entries/{entry_id}/views/{view_id}',
        ...options
    });
};

/**
 * Get View
 */
export const getView = <ThrowOnError extends boolean = false>(options: Options<GetViewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetViewResponse, GetViewError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/entries/{entry_id}/views/{view_id}',
        ...options
    });
};

/**
 * Update View
 */
export const updateView = <ThrowOnError extends boolean = false>(options: Options<UpdateViewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateViewResponse, UpdateViewError, ThrowOnError>({
        url: '/api/v1/entries/{entry_id}/views/{view_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Share Link
 */
export const getShareLink = <ThrowOnError extends boolean = false>(options: Options<GetShareLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetShareLinkResponse, GetShareLinkError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/share_links/{share_link_id}',
        ...options
    });
};

/**
 * Update Share Link
 */
export const updateShareLink = <ThrowOnError extends boolean = false>(options: Options<UpdateShareLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateShareLinkResponse, UpdateShareLinkError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/share_links/{share_link_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Login Admin
 */
export const loginAdmin = <ThrowOnError extends boolean = false>(options?: Options<LoginAdminData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/auth/login/admin',
        ...options
    });
};

/**
 * Login User
 */
export const loginUser = <ThrowOnError extends boolean = false>(options?: Options<LoginUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/auth/login/user',
        ...options
    });
};

/**
 * Read Users Me
 */
export const readUsersMe = <ThrowOnError extends boolean = false>(options?: Options<ReadUsersMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/auth/get_current_user',
        ...options
    });
};

/**
 * Protected Route
 */
export const protectedRoute = <ThrowOnError extends boolean = false>(options?: Options<ProtectedRouteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, ProtectedRouteError, ThrowOnError>({
        url: '/api/v1/auth/get_auth_header',
        ...options
    });
};

/**
 * Background Task
 */
export const backgroundTask = <ThrowOnError extends boolean = false>(options?: Options<BackgroundTaskData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/test/background-task',
        ...options
    });
};